#!/usr/bin/expect
log_file uboot_erase_log
send_user "Starting uboot_erase.exp\n"

source ./uboot-config.exp
source ./reset_board.exp

set send_slow {1 .1}

set ttydev /dev/ttyS0
send_user "Start up kermit on port $ttydev\n"

# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 50
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id
set KERNEL_PROMPT "root:\[^>].*>"

while 1 {
    expect {
        "Type ?" { }
        "ermit>" { break }
        "not found" {
            send_error "ERROR: Failed to start up kermit\n"
            all_done
        }
        timeout {
            send_error "ERROR: Time out starting up kermit\n"
            all_done
        }
    }
}

for {set i 0} {$i < $nkparams} {incr i} {
    send [lindex $kparams $i]
    while 1 {
        expect {
            "ermit>" {
                break
            }
            "\\?\[A-Z]" {
                send_error "ERROR: Failed to set up kermit parameters\n"
                all_done
            }
            timeout {
                send_error "ERROR: Time out setting up kermit parameters\n"
                all_done
            }
        }
    }
}

send "connect\r"
while 1 {
    expect {
        "ype the escape character*" {
            break
        }
        timeout {
            send_error "ERROR: Can't connect to serial port\n"
            exit
        }
    }
}

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0

sleep 2
send "\r"
set timeout 50
while 1 {
    expect {
        ">" {
            send -s "version\r"
            break
        }
        -re $KERNEL_PROMPT {
            send -s "version\r"
            break
        }
        timeout {
            send_user "failed version\n"
            break
        }
    }
}

set timeout 20
expect {
    "U-Boot" {
        send_user "We are in u-boot\n"
        set where_are_we "uboot"
    }
    "Linux" {
        send_user "We are in the kernel\n"
        set where_are_we "kernel"
    }
    timeout {
        send_user "Can't tell if we are in u-boot or the kernel\n"
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    expect ">"
    send_user "sending reset\n"
    send -s "reset\r"
} else {
    if { $where_are_we == "kernel" } {
        set timeout 60
        expect -re $KERNEL_PROMPT
        send_user "sending reboot\n"
        send -s "reboot\r"
    } else {
# If we don't know where we are, hit control-C and enter
        set timeout 10
        expect "*"
        expect "*"
        send_user "sending control-C\n"
        send "\3"
        sleep 1
        send "\r"
    }
}

set timeout 30
while 1 {
    expect {
        "Hit any key " {
            send "\r"
        }
        ">" {
            send_user "successful reset attempt\n"
            break
        }
        timeout {
            send_user "failed reset attempt\n"
            break
        }
    }
}

set timeout 800
send -s "run update\r"
while 1 {
    expect {
        ">" {
            break
        }
        timeout {
            send_user "ERROR: update failed\n"
            break
        }
    }
}

set timeout 8
send -s "printenv\r"
while 1 {
    expect {
        -re "ethaddr=((\[0-9A-F]\{2\}:)\{5\}\[0-9A-F]\{2\}).*>" {
            set ethaddr "$expect_out(1,string)\r"
            send_user "ethaddr is $ethaddr\n"
            break
        }
        timeout {
            set ethaddr ""
            send_user "ethaddr is not set\n"
            break
        }
    }
}

set timeout 60
send_user "sending reset\n"
send -s "reset\r"

while 1 {
    expect {
        "Hit any key " {
            sleep 2
            send "\r"
            send_user "successful reset attempt\n"
            break
        }
        timeout {
            send_user "failed reset attempt\n"
            break
        }
    }
}

expect ">"
send_user "set uboot environment\n"
send -s "set ipaddr $target_ipaddr\r"
expect ">"
send -s "set serverip $host_ipaddr\r"
expect ">"
send -s "set gatewayip $host_ipaddr\r"
expect ">"
send -s "set ethaddr $ethaddr\r"
expect ">"
send -s "set bootcmd run ramboot\r"
expect ">"
send -s "save\r"
while 1 {
    expect {
        -nocase -re "(error|fail).*>" {
            send_user "fail to saveenv\n"
            exit
        }
        -re "Saving Environment to Flash.*>" {
            break
        }
        timeout {
            send_user "saveenv timeout\n"
            exit
        }
    }
}

send -s "run ramboot\r"
while 1 {
    expect {
        -re $KERNEL_PROMPT {
            send_user "\nEnding uboot_erase.exp \n"
            break
        }
        timeout {
            send_user "failed tftp_boot attempt\n"
            break
        }
    }
}

log_file

#!/usr/bin/expect

send_user "Starting kernel_serial_transit.exp \n"

set send_slow {1 .1}

set ttydev /dev/ttyS0
send_user "Start up kermit on port $ttydev\n"

# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set modem none\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
#lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 50
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   send_error "ERROR: Failed to start up kermit\n"
                   all_done
		}
		timeout {
                   send_error "ERROR: Time out starting up kermit\n"
                   all_done
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
    send [lindex $kparams $i]

   while 1 {
	  expect {
		 "ermit>" { break }

		 "\\?\[A-Z]" {
                   send_error "ERROR: Failed to set up kermit parameters\n"
                    all_done
		 }

		 timeout {
                    send_error "ERROR: Time out setting up kermit parameters\n"
                    all_done
		 }
	  }
    }
}

send "connect\r"
while 1 {
	expect {
		"ype the escape character*" {
		     break  }
		timeout {
		     send_error "ERROR: Can't connect to serial port\n"
		     exit }
	}
}

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0

send "\r"
send "\r"
set timeout 50
   while 1 {
   expect {
            ">" {
	    send -s "version\r"
	     break
	    }	
	
	     
             timeout {
	     send_user "failed version\n"
	     break
	     }
	   }   
    } 


set timeout 20
expect {

    "U-Boot" {
	send_user "We are in u-boot\n"
	set where_are_we "uboot"
    }

    "Linux" {
	send_user "We are in the kernel\n"
	set where_are_we "kernel"
    }

    timeout {
	send_user "Can't tell if we are in u-boot or the kernel\n"
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    expect ">"
    send_user "sending reset\n"
    send -s "reset\r"
} else {
    if { $where_are_we == "kernel" } {
	set timeout 60
	expect ">"
	send_user "sending reboot\n"
	send -s "reboot\r"
    } else {
	# If we don't know where we are, hit control-C and enter
	set timeout 10
	expect "*"
	expect "*"
	send_user "sending control-C\n"
	send "\3"
	sleep 1
	send "\r"
    }
}

 while 1 {
       expect {

         "Hit any key " {
	     send "\3"
	     
         }

	 ">" {
	     send_user "successful reset attempt\n"
	     #set temp_status_flag $TEST_PASS
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"
            
            break
         }
      }
   }
	

    set timeout 1200
  
    send -s "loadb\r"
    while 1 {
	expect {	    
	    "Ready for binary (kermit) download" {
		set loadb_flag SUCCESS
		break
	    }	    
	    	    
	    timeout {
		send_user "ERROR: loadb\n"		
		break
	    }
	}
    }
    
    send -s "\034"
    send -s "c"
    while 1 {
	expect {    
	    "ermit>" {
		set back_flag SUCCESS
		break
	    }
	    	    	    
	    timeout {
		send_user "ERROR: back to kermit error\n"		
		break
	    }
	}
    }
    
    set timeout 2400
    send -s "send /tftpboot/uImage-beta\r"
    while 1 {
	expect {	    
	    "ermit>" {
		set send_file_flag SUCCESS
		break
	    }
	    	    	    
	    timeout {
		send_user "ERROR: send file error\n"		
		break
	    }
	}
    }
    
    send -s "connect\r"
    while 1 {
	expect {	    
	    ">" {
		set connect_flag SUCCESS
		break
	    }
	    	    	    
	    timeout {
		send_user "ERROR: connect again error\n"		
		break
	    }
	}
    }
    
    send -s "bootm 0x1000000\r"
    while 1 {
	expect {	    
	    "root:~>" {
		set bootm_flag SUCCESS
		send_user "Ending bootm kernel\n"
		send_user "Kernel serial transit success.\n"
		break
	    }
	    	    	    
	    timeout {
		send_user "ERROR: bootm error\n"		
		break
	    }
	}
    }


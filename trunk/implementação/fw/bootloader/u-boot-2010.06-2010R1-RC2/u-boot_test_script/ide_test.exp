#!/usr/bin/expect
log_file ide_test_log
send_user "Starting ide_test.exp!\n"

set uboot_path ~/checkouts/uboot/u-boot_1.1.6
set uclinux_path ~/checkouts/kernel/uClinux-dist
set TITLE "IDE Test"
set dxe_filename linux
set ttydev /dev/ttyS0
set send_slow {1 0.1}
set TEST_PASS pass
set TEST_FAIL fail
set password "123456"

set board_type BF537-STAMP
send_log "\n#### board_type is $board_type\n"
set CONFIG_TYPE bf537_config

# ide type could be: cf or hdd. The default one is cf.
set ide_type cf
send_log "\n#### ide_type is $ide_type\n"

if { $argc == 1} {
set ide_type [lindex $argv 0]
}

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1

cd $uboot_path
expect "u-boot_1.1.6>"

step "make clean"

spawn make distclean
set timeout 500
while 1 {
      expect {
	     "u-boot_1.1.6>" { }
	     "/bin/sh" { }
	     eof { break }
      }
}

spawn make clean
set timeout 500
while 1 {
      expect {
	     "u-boot_1.1.6>" { }
	     "/bin/sh" { }
	     eof { break }
      }
}

step "Modify uboot head file"

if { $ide_type == "cf"} {
sleep 3
 set timeout 2
      spawn ex include/configs/bf537.h
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }
      sleep 1
      send "/#define CONFIG_BFIN_CF_IDE\r"
      expect "#define CONFIG_BFIN_CF_IDE"
      send "d\r"
      expect ":"
      send "i\r"

      send "#define CONFIG_BFIN_CF_IDE\r"

      send ".\r"
      expect :
      send "wq\r"
      expect eof
      
} elseif { $ide_type == "hdd" } {
sleep 3
 set timeout 2
      spawn ex include/configs/bf537.h
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }
      sleep 1
      send "/#define CONFIG_BFIN_HDD_IDE\r"
      expect "#define CONFIG_BFIN_HDD_IDE"
      send "d\r"
      expect ":"
      send "i\r"

      send "#define CONFIG_BFIN_HDD_IDE\r"

      send ".\r"
      expect :
      send "wq\r"
      expect eof

}
step " make config"

spawn make mrproper
set timeout 500
while 1 {
      expect {
	     "u-boot_1.1.6>" { }
	     "/bin/sh" { }
	     eof { break }
      }
}

spawn make $CONFIG_TYPE
set timeout 500
while 1 {
      expect {
	     "u-boot_1.1.6>" { }
	     "/bin/sh" { }
	     eof { break }
      }
}

step " make"

cd $uboot_path
spawn make
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
	     "u-boot_1.1.6" { set bfin_make_status success }
	     "Error" {set bfin_make_status failure }
	     "/bin/sh" { }
	     eof { break }
      }
}

if { $bfin_make_status == "failure" } {
      puts "ERROR: Error somewhere during make"
#      lappend result "FATAL ERROR: Error somewhere in make"
}    
  
step " copy u-boot.bin"
  
set timeout 8
cd $uboot_path
exec cp u-boot.bin  /tftpboot
 
step "start kermit"

#step "Start up kermit on port $ttydev"
# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 5
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   report "ERROR: Failed to start up kermit"
                   all_done
		}
		timeout {
                   report "ERROR: Time out starting up kermit"
                   all_done
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
   send [lindex $kparams $i]

   while 1 {
      expect {
         "ermit>" { break }

         "\\?\[A-Z]" {
            puts "ERROR: Failed to set up kermit parameters"
          #  all_done
         }

         timeout {
            puts "ERROR: Time out setting up kermit parameters"
           # all_done
         }
      }
   }
}

send "connect\r"
while 1 {
   expect {
      "ype the escape character*" {
         break
      }

      timeout {
         puts "\nERROR: Can't connect to serial port\n"
         exit
      }
   }
}

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0

send "\r"
send "\r"
  sleep 10
   set send_slow {1 .1}  
   set timeout 50
   while 1 {
   expect {
            ">" {
	    send -s "version\r"
	     break
	    }	
	    
	    "root:~>" {
	    send -s "version\r"
	     break
	    }	      
	     
             timeout {
	     send_user "failed version\n"
	     break
	     }
	   }   
    } 


set timeout 20
expect {

    "U-Boot" {
	send_user "We are in u-boot\n"
	set where_are_we "uboot"
    }

    "Linux" {
	send_user "We are in the kernel\n"
	set where_are_we "kernel"
    }

    timeout {
	send_user "Can't tell if we are in u-boot or the kernel\n"
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    expect ">"
    send_user "sending reset\n"
    send -s "reset\r"
} else {
    if { $where_are_we == "kernel" } {
	set timeout 60
	expect "root:~>"
	send_user "sending reboot\n"
	send -s "reboot\r"
    } else {
	# If we don't know where we are, hit control-C and enter
	set timeout 10
	expect "*"
	expect "*"
	send_user "sending control-C\n"
	send "\3"
	sleep 1
	send "\r"
    }
}

 while 1 {
       expect {

         "Hit any key " {
	     send "\3"
	     
         }

	 ">" {
	     send_user "successful reset attempt\n"
	     #set temp_status_flag $TEST_PASS
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"
            
            break
         }
      }
   }
	
sleep 5

step "Start $TITLE\r"

puts "\n###########################################################################################\n"
puts "    Switch SW6.4 from 0 to 1 on BF537."
puts "\n###########################################################################################\n"
send_log "\n###########################################################################################\n"
send_log "   Switch SW6.4 from 0 to 1 on BF537."
send_log "\n###########################################################################################\n"

sleep  10

set timeout 120
set case_num 0

incr case_num
send "run update\r" 
while 1 {
   expect {
      "Bytes transferred*Copy to Flash*done" {
		puts "\rCase $case_num ...PASS\r"
		expect ">"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}
  
  
   
incr case_num
send "reset\r" 
while 1 {
   expect {
      "Bus 0: OK" {
		puts "\rCase $case_num ...PASS\r"		
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}
   
while 1 {
       expect {
         "Hit any key " {
	     send "\3"
	     
         }

	 ">" {
	     send_user "successful reset attempt\n"
	     #set temp_status_flag $TEST_PASS
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"
            
            break
         }
      }
   }
   send_user "set uboot environment\n"
   send -s "set ipaddr 10.100.4.50\r"
   send -s "set serverip 10.100.4.174\r"
   send -s "save\r"
   while 1 {
	expect {
	
	   -re "Writing to Flash... done" {
                expect ">"
                break
        } 
	    	    
	    timeout {
		break
	    }
	}
    }

puts "\n###########################################################################################\n"
puts "    Switch SW6.4 from 1 to 0 on BF537."
puts "\n###########################################################################################\n"
send_log "\n###########################################################################################\n"
send_log "   Switch SW6.4 from 1 to 0 on BF537."
send_log "\n###########################################################################################\n"

sleep  10

send "reset\r"
while 1 {
   expect {
      "Bus 0: OK" {
                puts "\rCase $case_num ...PASS\r"
                break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit
         }
     }
}

while 1 {
       expect {
         "Hit any key " {
             send "\3"

         }

         ">" {
             send_user "successful reset attempt\n"
             #set temp_status_flag $TEST_PASS
             break
         }

         timeout {
             send_user "failed reset attempt\n"

            break
         }
      }
   }
    
incr case_num
send -s "help ide\r" 
while 1 {
   expect {
      "ide *read*ide*write" {
		puts "\rCase $case_num ...PASS\r"
		expect ">"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send -s "ide part\r" 
while 1 {
   expect {
      "Partition    *Start Sector    *Num Sectors    *Type" {
		puts "\rCase $case_num ...PASS\r"
		expect ">"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send -s "tftpboot 0x1000000 uImage\r" 
while 1 {
   expect {
   
       -re "Bytes transferred = \[0-9]+ \\\((\[0-9a-fA-F]+) hex\\\)" {
                set image_size $expect_out(1,string)
                send_user "Image size is $image_size\n"
		puts "\rCase $case_num ...PASS\r"
		expect ">"
                break
        }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send -s "ide write 0x1000000 0x3f 0x2000\r" 
while 1 {
   expect {
      "IDE write*blocks written: OK" {
		expect ">"
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send -s "help diskboot\r" 
while 1 {
   expect {
      "diskboot loadAddr dev:part" {
        	expect ">"
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send -s "diskboot 0x1000000 0:1\r" 
while 1 {
   expect {
      "Loading from IDE device" {
        	expect ">"
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send -s "bootm 0x1000000\r" 
set timeout 180
   while 1 {
      expect {

         -re "Kernel panic" {
            report "kernel panic detected... trying to recover from it"        
            break
         }

         -re "Sash command shell.*/> " {
            puts "successful boot attempt"
	    puts "\rCase $case_num ...PASS\r"
            break
         }
	 
	  "root:~> " {
            puts "successful boot attempt"
	    puts "\rCase $case_num ...PASS\r"     
            break
         }

         -re "Linux version (.*) " {
            set linux_version $expect_out(1,string)
         }

         # Look for gcc version N.N[.N[.N]]
         -re "gcc version (\[0-9](\.\[0-9]+)+)" {
            set gcc_version [lindex $expect_out(0,string) 2]
         }

         # Look for text followed by 1 or more spaces or tabs
         # followed by = followed by 1 or more spaces or tabs
         # followed by (0xNNNNNN-0xNNNNNN)
         -re "text\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_text $expect_out(1,string)
         }

         -re "data\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_data $expect_out(1,string)
         }

         -re "bss\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_bss $expect_out(1,string)
         }
         -re "rootfs\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_rootfs $expect_out(1,string)
         }

         # Note that here we're looking for zero or 1 space. Doh!
         -re "stack\[\x20\t]?=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_stack $expect_out(1,string)
         }

       
         timeout {
            puts "failed boot attempt"
	    puts "\rCase $case_num ...FAIL\r"
            puts "$TITLE ............\[FAIL\]\r"	 
            exit
         }
      }
   }

   
incr case_num
send "reboot\r" 
while 1 {
   expect {
      "Bus 0: OK" {
		puts "\rCase $case_num ...PASS\r"		
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

 while 1 {
       expect {
         "Hit any key " {
	     send "\3"
	     
         }

	 ">" {
	     send_user "successful reset attempt\n"	     
	     break
	 }

         timeout {
	    send_user "failed reset attempt\n"            
            break
         }
      }
   }

puts "\n$TITLE ............\[PASS\]\n"
                                     
log_file
 
send_user "\nEnding ide_test.exp!\n"


